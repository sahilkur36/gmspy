{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n\n# Baseline Correction\n\nBaseline Correction, like in SeismoSignal, consists in (i) determining, through regression analysis\n(least-squares-fit method), the polynomial curve that best fits the time-acceleration pairs\nof values and then (ii) subtracting from the actual acceleration values their corresponding counterparts\nas obtained with the regression-derived equation.\nIn this manner, spurious baseline trends, usually well noticeable in the displacement time-history\nobtained from double time-integration of uncorrected acceleration records,\nare removed from the input motion.\n\nsee :func:`gmspy.baselinecorr`.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.integrate import cumulative_trapezoid\n\nimport gmspy as gm"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "load \"kobe\" records\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "ts, acc = gm.load_gm_examples('Kobe')\ndt = ts[1] - ts[0]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Obtain uncorrected velocity and displacement sequences by direct integration\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "vel = cumulative_trapezoid(acc, ts, initial=0)\ndisp = cumulative_trapezoid(vel, ts, initial=0)\nplot_obj_ori = [acc, vel, disp]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Obtain corrected time histories by different polynomial degrees\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "plot_obj_corr = []\ndegrees = [0, 1, 2, 3]\nfor i, degree in enumerate(degrees):\n    acc_corr, vel_corr, disp_corr = gm.baselinecorr(ts,\n                                                    acc,\n                                                    degree,\n                                                    plot=False)\n    plot_obj_corr.append([acc_corr, vel_corr, disp_corr])\ncolors = ['#037ef3', '#f85a40', '#00c16e', '#7552cc']\ntitles = ['acceleration', 'velocity', 'displacement']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "plot figure\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "fig, axs = plt.subplots(3, 1, figsize=(9, 12), sharex=True)\nfor j in range(3):\n    ax = axs[j]\n    ax.plot(ts, plot_obj_ori[j], c='gray', lw=1, alpha=0.6, label=\"origin\")\n    for k, degree in enumerate(degrees):\n        ax.plot(ts,\n                plot_obj_corr[k][j],\n                c=colors[k],\n                lw=1,\n                label=f\"degree={degree}\")\n    ax.hlines(0, np.min(ts), np.max(ts), lw=0.5, colors='k')\n    ax.set_xlim(np.min(ts), np.max(ts))\n    ax.grid(False)\n    ax.set_ylabel(titles[j], fontsize=15)\n    ax.tick_params(labelsize=12)\naxs[0].legend(fontsize=12, ncol=5, loc='center', bbox_to_anchor=(0.5, 1.15))\naxs[-1].set_xlabel(\"Time (s)\", fontsize=15)\nplt.show()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}